NoSlow.kt:61

    /*

    private val comingSoon = ComingSoon("ComingSoon", "ComingSoon")

    No more coming soon at Feb 5 2024
    */

NoSlow.kt:142
/*
                when(swordMode.get()){
                "PostPlace" -> {
                    if (event.eventState == EventState.POST) {
                        mc.netHandler.addToSendQueue(
                            C08PacketPlayerBlockPlacement(
                                BlockPos(-1, -1, -1),
                                255,
                                mc.thePlayer.inventory.getCurrentItem(),
                                0f,
                                0f,
                                0f
                            )
                        )
                    }
                }

                "SpamPlace" -> {
                    mc.netHandler.addToSendQueue(
                        C08PacketPlayerBlockPlacement(
                            BlockPos(-1, -1, -1),
                            255,
                            mc.thePlayer.inventory.getCurrentItem(),
                            0f,
                            0f,
                            0f
                        )
                    )
                }

                "DigDown" ->  {
                    mc.netHandler.addToSendQueue(C07PacketPlayerDigging(C07PacketPlayerDigging.Action.RELEASE_USE_ITEM, BlockPos.ORIGIN, EnumFacing.DOWN))
                }

                "OtherSwitch" -> {
                    if (event.eventState == EventState.POST) return
                    if (mc.thePlayer.ticksExisted % 5 == 0) {
                        mc.netHandler.addToSendQueue(
                            C07PacketPlayerDigging(
                                C07PacketPlayerDigging.Action.RELEASE_USE_ITEM,
                                BlockPos.ORIGIN,
                                EnumFacing.DOWN
                            )
                        )
                    }
                    if (mc.thePlayer.ticksExisted % 5 == 1) {
                        mc.netHandler.addToSendQueue(C08PacketPlayerBlockPlacement(mc.thePlayer.currentEquippedItem))

                    }
                }

                "PreDigDown" -> {
                    if (event.eventState == EventState.PRE)
                        mc.netHandler.addToSendQueue(
                            C07PacketPlayerDigging(
                                C07PacketPlayerDigging.Action.RELEASE_USE_ITEM,
                                BlockPos.ORIGIN,
                                EnumFacing.DOWN
                            )
                        )
                }

                "Switch" -> {
                    mc.netHandler.addToSendQueue(
                        C09PacketHeldItemChange((mc.thePlayer.inventory.currentItem + 1) % 9)
                    )
                    mc.netHandler.addToSendQueue(
                        C09PacketHeldItemChange(mc.thePlayer.inventory.currentItem)
                    )
                }

            }*/
//Old
//    private val swordMode = ListValue(
//        name = "swordMode",
//        values = arrayOf("None", "PostPlace", "SpamPlace", "DigDown", "OtherSwitch", "PreDigDown", "Switch"),
//        value = "None"
//    )
//    private val useMode = ListValue(
//        name = "consumeMode",
//        values = arrayOf("None", "Bug", "Gay", "SpamPlace", "Switch"), value = "None"
//    )
//    private val bowMode = ListValue(
//          name = "bowMode",
//          values = arrayOf("None", "Switch", "DigDown", "WTF", "SpamPlace"), value = "None"
//      )


NoSlow.kt:145

//        if(mc.thePlayer == null || mc.theWorld == null)
//            return

/*        if(mc.thePlayer.isUsingItem && ((item) is ItemBow)) {
            if (bowMode.get() == "WTF") {
                if (mc.thePlayer.ticksExisted % 5 == 0) {
                    mc.netHandler.addToSendQueue(
                        C07PacketPlayerDigging(C07PacketPlayerDigging.Action.RELEASE_USE_ITEM, BlockPos.ORIGIN, EnumFacing.DOWN)
                    )
                }
                if (mc.thePlayer.ticksExisted % 5 == 1) {
                    mc.netHandler.addToSendQueue(C08PacketPlayerBlockPlacement(mc.thePlayer.currentEquippedItem))

                }
            }
            else if (bowMode.get() == "SpamPlace") {
                mc.netHandler.addToSendQueue(
                    C08PacketPlayerBlockPlacement(BlockPos(BlockPos.ORIGIN), 255, mc.thePlayer!!.inventory.getCurrentItem(), 0.0F, 0.0F, 0.0F)
                )
            }
            else if (bowMode.get() == "Switch") {
                mc.netHandler.addToSendQueue(
                    C09PacketHeldItemChange((mc.thePlayer.inventory.currentItem + 1) % 9))
                mc.netHandler.addToSendQueue(C09PacketHeldItemChange(mc.thePlayer.inventory.currentItem))
            }
            else if (bowMode.get() == "DigDown") {
                mc.netHandler.addToSendQueue(C07PacketPlayerDigging(C07PacketPlayerDigging.Action.RELEASE_USE_ITEM, BlockPos.ORIGIN, EnumFacing.DOWN))
            }
        }*/

        /* Old code
                    when (useMode.get()) {
                        "Gay" -> {
                            if (mc.thePlayer.ticksExisted % 5 == 0) {
                                mc.netHandler.addToSendQueue(
                                    C07PacketPlayerDigging(
                                        C07PacketPlayerDigging.Action.RELEASE_USE_ITEM,
                                        BlockPos.ORIGIN,
                                        EnumFacing.DOWN
                                    )
                                )
                            }
                            if (mc.thePlayer.ticksExisted % 5 == 1) {
                                mc.netHandler.addToSendQueue(C08PacketPlayerBlockPlacement(mc.thePlayer.currentEquippedItem))
                            }
                        }
                        "SpamPlace" -> {
                                mc.netHandler.addToSendQueue(
                                    C08PacketPlayerBlockPlacement(
                                        BlockPos(BlockPos.ORIGIN),
                                        255,
                                        mc.thePlayer!!.inventory.getCurrentItem(),
                                        0.0F, 0.0F, 0.0F
                                    )
                                )
                            }
                        "Switch" -> {
                                mc.netHandler.addToSendQueue(
                                    C09PacketHeldItemChange((mc.thePlayer.inventory.currentItem + 1) % 9))
                                mc.netHandler.addToSendQueue(
                                    C09PacketHeldItemChange(mc.thePlayer.inventory.currentItem))
                        }
                        "Intave" -> {
                            mc.netHandler.addToSendQueue(
                                C09PacketHeldItemChange(
                                    (mc.thePlayer.inventory.currentItem + 1) % 9))
                            mc.netHandler.addToSendQueue(
                                C07PacketPlayerDigging(
                                    C07PacketPlayerDigging.Action.DROP_ITEM,
                                    BlockPos(-1, -1, -1), EnumFacing.DOWN
                                )
                            )
                            mc.netHandler.addToSendQueue(C09PacketHeldItemChange(mc.thePlayer.inventory.currentItem))
                        }*/

        //VeryOld noslow code
            /*
            private var lastBlockingStat = false
            private var nextTemp = false
            private var waitC03 = false
            private var funnyBoolean = false
            private var delay = 100L
            private val msTimer = MSTimer()
            private var packetBuf = LinkedList<Packet<INetHandlerPlayServer>>()
            private var aura: KillAura? = null
            private var count = 0
            private var lastItem: ItemStack? = null
            private val isBlocking: Boolean
                get() = (mc.thePlayer.isUsingItem || (KevinClient.moduleManager.getModule(KillAura::class.java)).blockingStatus) && mc.thePlayer.heldItem != null && mc.thePlayer.heldItem.item is ItemSword

            override fun onDisable() {
                msTimer.reset()
                nextTemp = false
                waitC03 = false
                packetBuf.clear()
            }

            @EventTarget
            fun onMotion(event: MotionEvent) {
                val thePlayer = mc.thePlayer ?: return
                val heldItem = thePlayer.heldItem ?: return

                if (!MovementUtils.isMoving)
                    return

                if (aura == null) aura = KevinClient.moduleManager.getModule(KillAura::class.java)
                val aura = this.aura!!
                val isBlocking = (thePlayer.isBlocking || aura.blockingStatus) && (heldItem.item) is ItemSword
                val isUsing = thePlayer.isUsingItem
                if (packetMode equal "GrimACSwitch" && event.eventState == EventState.PRE) {
                    if (thePlayer.isUsingItem || thePlayer.isBlocking || aura.blockingStatus) {
                        mc.netHandler.addToSendQueue(C09PacketHeldItemChange((mc.thePlayer.inventory.currentItem + 1) % 9))
                        mc.netHandler.addToSendQueue(C09PacketHeldItemChange(mc.thePlayer.inventory.currentItem))
                    }
                }
                if (!isBlocking && !isUsing) return
                val isUsingNotBlocking = !isBlocking

                when(packetMode.get()){
                    "AntiCheat" -> if (isBlocking) {
                        when (event.eventState) {
                            EventState.PRE -> {
                                mc.netHandler.addToSendQueue(
                                    C07PacketPlayerDigging(
                                        C07PacketPlayerDigging.Action.RELEASE_USE_ITEM,
                                        BlockPos(0, 0, 0),
                                        EnumFacing.DOWN
                                    )
                                )
                            }
                            EventState.POST -> {
                                mc.netHandler.addToSendQueue(
                                    C08PacketPlayerBlockPlacement(
                                        BlockPos(-1, -1, -1),
                                        255, mc.thePlayer!!.inventory.getCurrentItem(),
                                        0.0F, 0.0F, 0.0F
                                    )
                                )
                            }
                        }
                    }

                    "AntiCheat2" -> if (isBlocking)  {
                        if (event.eventState == EventState.PRE) {
                            mc.netHandler.addToSendQueue(
                                C07PacketPlayerDigging(
                                    C07PacketPlayerDigging.Action.RELEASE_USE_ITEM,
                                    BlockPos.ORIGIN,
                                    EnumFacing.DOWN)
                            )

                        }
                        else {
                            mc.netHandler.addToSendQueue(
                                C08PacketPlayerBlockPlacement(
                                    BlockPos(-1, -1, -1),
                                    255,
                                    null,
                                    0.0f,
                                    0.0f,
                                    0.0f
                                )
                            )
                        }
                    }

                    "SwitchItem" -> if (event.eventState == EventState.PRE) {
                        mc.netHandler.addToSendQueue(
                            C09PacketHeldItemChange((mc.thePlayer.inventory.currentItem + 1) % 9))
                        mc.netHandler.addToSendQueue(
                            C09PacketHeldItemChange(mc.thePlayer.inventory.currentItem))
                    }

                    "ReverseEventSwitchItem" -> if (event.eventState == EventState.PRE) {
                        mc.netHandler.addToSendQueue(C09PacketHeldItemChange((mc.thePlayer.inventory.currentItem + 1) % 9))
                    } else {
                        mc.netHandler.addToSendQueue(C09PacketHeldItemChange(mc.thePlayer.inventory.currentItem))
                    }
                    "ReverseNCP" -> if (isBlocking)  { // from Rise
                        when (event.eventState) {
                            EventState.PRE -> {
                                mc.netHandler.addToSendQueue(C08PacketPlayerBlockPlacement(BlockPos(-1, -1, -1), 255, mc.thePlayer!!.inventory.getCurrentItem(), 0.0F, 0.0F, 0.0F))
                            }
                            EventState.POST -> {
                                mc.netHandler.addToSendQueue(C07PacketPlayerDigging(C07PacketPlayerDigging.Action.RELEASE_USE_ITEM, BlockPos.ORIGIN, EnumFacing.DOWN))
                            }
                        }
                    }
                    "AAC" -> if (isBlocking) {
                        if (mc.thePlayer.ticksExisted % 3 == 0 && event.eventState == EventState.PRE) {
                            mc.netHandler.addToSendQueue(C07PacketPlayerDigging(C07PacketPlayerDigging.Action.RELEASE_USE_ITEM, BlockPos(-1, -1, -1), EnumFacing.DOWN))
                        } else if (mc.thePlayer.ticksExisted % 3 == 1 && event.eventState == EventState.POST) {
                            C08PacketPlayerBlockPlacement(mc.thePlayer.inventory.getCurrentItem())
                        }
                    }
                    "AAC5" -> {
                        if (event.eventState == EventState.POST && (mc.thePlayer.isUsingItem || mc.thePlayer.isBlocking || aura.blockingStatus)) {
                            mc.netHandler.addToSendQueue(C08PacketPlayerBlockPlacement(BlockPos(-1, -1, -1), 255, mc.thePlayer.inventory.getCurrentItem(), 0f, 0f, 0f))
                        }
                    }

                    "Delay" -> if (isBlocking) {
                        if (event.eventState == EventState.POST) return
                        if (!mc.thePlayer.isBlocking) funnyBoolean = false

                        if (mc.thePlayer.isBlocking && mc.thePlayer.ticksExisted % 5 == 0 && funnyBoolean) {
                            mc.netHandler.addToSendQueue(C07PacketPlayerDigging(C07PacketPlayerDigging.Action.RELEASE_USE_ITEM, BlockPos.ORIGIN, EnumFacing.DOWN))
                            funnyBoolean = false
                        }

                        if (mc.thePlayer.isBlocking && mc.thePlayer.ticksExisted % 5 == 1 && !funnyBoolean) {
                            mc.netHandler.addToSendQueue(C08PacketPlayerBlockPlacement(mc.thePlayer.currentEquippedItem))
                            funnyBoolean = true
                        }
                    }

                    "Intave" -> if (isBlocking) { // from Rise
                        if ((mc.thePlayer.isBlocking || aura.blockingStatus) && msTimer.hasTimePassed(delay)) {
                            when (event.eventState) {
                                EventState.PRE -> {
                                    mc.netHandler.addToSendQueue(C07PacketPlayerDigging(C07PacketPlayerDigging.Action.RELEASE_USE_ITEM, BlockPos.ORIGIN, EnumFacing.DOWN))

                                }
                                EventState.POST -> {
                                    mc.netHandler.addToSendQueue(C07PacketPlayerDigging(C07PacketPlayerDigging.Action.RELEASE_USE_ITEM, BlockPos.ORIGIN, EnumFacing.DOWN))
                                    delay = if (funnyBoolean) {
                                        100L
                                    } else {
                                        200L
                                    }
                                    funnyBoolean = !funnyBoolean
                                    msTimer.reset()
                                }
                            }
                        }
                    }

                    "GrimAC" -> if (isBlocking) {
                        if (event.eventState == EventState.PRE)
                            mc.netHandler.addToSendQueue(
                                C07PacketPlayerDigging(
                                    C07PacketPlayerDigging.Action.RELEASE_USE_ITEM,
                                    BlockPos.ORIGIN,
                                    EnumFacing.DOWN
                                )
                            )
                    }
                }
            }

            @EventTarget
            fun onUpdate(event: UpdateEvent) {
                if(mc.thePlayer == null || mc.theWorld == null)
                    return
                if((packetMode equal "Matrix" || packetMode equal "Vulcan") && (lastBlockingStat || isBlocking)) {
                    if(msTimer.hasTimePassed(230) && nextTemp) {
                        nextTemp = false
                        PacketUtils.sendPacketNoEvent(C07PacketPlayerDigging(C07PacketPlayerDigging.Action.RELEASE_USE_ITEM, BlockPos(-1, -1, -1), EnumFacing.DOWN))
                        if(packetBuf.isNotEmpty()) {
                            var canAttack = false
                            for(packet in packetBuf) {
                                if(packet is C03PacketPlayer) {
                                    canAttack = true
                                }
                                if(!((packet is C02PacketUseEntity || packet is C0APacketAnimation) && !canAttack)) {
                                    PacketUtils.sendPacketNoEvent(packet)
                                }
                            }
                            packetBuf.clear()
                        }
                    }
                    if(!nextTemp) {
                        lastBlockingStat = isBlocking
                        if (!isBlocking) {
                            return
                        }
                        PacketUtils.sendPacketNoEvent(C08PacketPlayerBlockPlacement(BlockPos(-1, -1, -1), 255, mc.thePlayer.inventory.getCurrentItem(), 0f, 0f, 0f))
                        nextTemp = true
                        waitC03 = packetMode equal "Vulcan"
                        msTimer.reset()
                    }
                }
            }

            @EventTarget
            fun onTick(event: TickEvent) {
                mc.thePlayer?: return
                mc.theWorld?: return

                if (packetMode equal "GrimAC") {
                    if (mc.thePlayer.isBlocking || aura?.blockingStatus == true)
                        mc.netHandler.addToSendQueue(
                            C08PacketPlayerBlockPlacement(
                                BlockPos(-1, -1, -1),
                                255,
                                mc.thePlayer!!.inventory.getCurrentItem(),
                                0.0F, 0.0F, 0.0F
                            )
                        )
                    else if (mc.thePlayer.isUsingItem) {
                        mc.netHandler.addToSendQueue(
                            C09PacketHeldItemChange(
                            (mc.thePlayer.inventory.currentItem + 1) % 9)
                        )
                        mc.netHandler.addToSendQueue(
                            C09PacketHeldItemChange
                                (mc.thePlayer.inventory.currentItem)
                        )
                    }
                    else if(packetMode equal "Karhu"){
                         if(!mc.thePlayer.isBlocking || !aura?.blockingStatus!!) {
                            mc.netHandler.addToSendQueue(
                                C08PacketPlayerBlockPlacement(
                                    BlockPos(-1, -1, -1), 255,
                                    mc.thePlayer!!.inventory.getCurrentItem(),
                                    0.0F, 0.0F, 0.0F
                                )
                            )
                        }
                    }
                }
            }

            @EventTarget
            fun onPacket(event: PacketEvent) {
                if(mc.thePlayer == null || mc.theWorld == null)
                    return
                val packet = event.packet
                if((packetMode equal "Matrix" || packetMode equal "Vulcan") && nextTemp) {
                    if((packet is C07PacketPlayerDigging || packet is C08PacketPlayerBlockPlacement) && isBlocking) {
                        event.cancelEvent()
                    }else if (packet is C03PacketPlayer || packet is C0APacketAnimation || packet is C0BPacketEntityAction || packet is C02PacketUseEntity || packet is C07PacketPlayerDigging || packet is C08PacketPlayerBlockPlacement) {
                        if (packetMode equal "Vulcan" && waitC03 && packet is C03PacketPlayer) {
                            waitC03 = false
                            return
                        }
                        packetBuf.add(packet as Packet<INetHandlerPlayServer>)
                        event.cancelEvent()
                    }
                }
            }

            @EventTarget
            fun onClick(event: ClickUpdateEvent) {
                if (packetMode notEqual "Bug") return
                val player = mc.thePlayer ?: return
                val currentItem = player.currentEquippedItem
                if (currentItem != null && (player.isUsingItem || isBlocking) && (player.moveForward != 0.0f || player.moveStrafing != 0.0f) && currentItem.item !is ItemBow) {
                    if (lastItem != null && lastItem!! != currentItem) {
                        count = 0
                    }
                    val state = if (currentItem.item is ItemSword) 1 else 3
                    if (count != state) {
                        event.cancelEvent()
                        mc.netHandler.networkManager.sendPacketNoEvent(C16PacketClientStatus(C16PacketClientStatus.EnumState.OPEN_INVENTORY_ACHIEVEMENT))
                        player.stopUsingItem()
                        player.closeScreen()
                        count = state
                    }
                    if (event.isCancelled) mc.sendClickBlockToController(mc.currentScreen == null && mc.gameSettings.keyBindAttack.isKeyDown && mc.inGameHasFocus)
                    lastItem = currentItem
                } else {
                    count = 0
                }

            }

            override val tag: String
                get() = packetMode.get()

            @EventTarget
            fun onSlowDown(event: SlowDownEvent) {
                val heldItem = mc.thePlayer!!.heldItem?.item

                event.forward = getMultiplier(heldItem, true)
                event.strafe = getMultiplier(heldItem, false)
            }

            private fun getMultiplier(item: Item?, isForward: Boolean): Float {
                return when {
                    (item)is ItemFood || (item)is ItemPotion || (item)is ItemBucketMilk -> {
                        if (isForward) this.consumeForwardMultiplier.get() else this.consumeStrafeMultiplier.get()
                    }
                    (item)is ItemSword -> {
                        if (isForward) this.blockForwardMultiplier.get() else this.blockStrafeMultiplier.get()
                    }
                    (item)is ItemBow -> {
                        if (isForward) this.bowForwardMultiplier.get() else this.bowStrafeMultiplier.get()
                    }
                    else -> 0.2F
                    }
            }
        }*/